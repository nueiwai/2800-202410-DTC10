<%- include('templates/map_header') %>
  <!-- the map -->
  <div id='map'></div>
  <!-- the geocoder search bar -->
  <div class="geocoder" id="geocoder"></div>

  <script>
    const mapbox_access_token = '<%= process.env.MAPBOX_ACCESS_TOKEN %>';
    mapboxgl.accessToken = mapbox_access_token;

    var map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/streets-v11',
      center: [-123.112755, 49.241722],  // Vancouver
      zoom: 10.7,
      pitch: 44  // Controls how tilted the map is
    });

    // The start location searchbar
    var startGeocoder = new MapboxGeocoder({
      accessToken: mapboxgl.accessToken,
      mapboxgl: mapboxgl,
      placeholder: 'Enter start location'
    });

    // The end location searchbar
    var endGeocoder = new MapboxGeocoder({
      accessToken: mapboxgl.accessToken,
      mapboxgl: mapboxgl,
      placeholder: 'Enter end location'
    });

    // Add the search bars to the map
    map.addControl(startGeocoder);
    map.addControl(endGeocoder);

    var startLocation, endLocation;  // Store the start and end location coordinates

    startGeocoder.on('result', function (e) {
      startLocation = e.result.geometry.coordinates;
      drawRoute();
    });

    endGeocoder.on('result', function (e) {
      endLocation = e.result.geometry.coordinates;
      drawRoute();
    });

    /**
     * Draw the route on the map
     * @param {Array} start - The start location coordinates
     * @param {Array} end - The end location coordinates
     */
    function drawRoute() {
      if (startLocation && endLocation) {
        // Plot the points on the map
        plotPoints(startLocation, endLocation);
        // Draw the curved arc
        drawArc(startLocation, endLocation);
        // Draw the straight line with shadow
        drawShadow(startLocation, endLocation);
      }
    }

    /**
     * Plot the start and end location points on the map
     * @param {Array} start - The start location coordinates
     * @param {Array} end - The end location coordinates
     */
    function plotPoints(start, end) {
      const pointsGeojson = {
        type: 'FeatureCollection',
        features: [
          {
            type: 'Feature',
            geometry: {
              type: 'Point',
              coordinates: start
            },
            properties: {}
          },
          {
            type: 'Feature',
            geometry: {
              type: 'Point',
              coordinates: end
            },
            properties: {}
          }
        ]
      };

      if (map.getSource('points')) {
        map.getSource('points').setData(pointsGeojson);
      } else {
        map.addSource('points', {
          type: 'geojson',
          data: pointsGeojson
        });
        map.addLayer({
          id: 'points',
          type: 'circle',
          source: 'points',
          paint: {
            'circle-radius': 6,
            'circle-color': '#31B6C0'
          }
        });
      }
    }

    /**
     * Draw a curved arc between the start and end location points
     * @param {Array} start - The start location coordinates
     * @param {Array} end - The end location coordinates
     * 
     * This line-arc block of code was adapted from code found here:
     * source: https://www.youtube.com/watch?v=VNVmlWv4gdQ
     */
    function drawArc(start, end) {
      // First calculate the distance between start and end location points
      const distance = Math.sqrt(Math.pow(end[0] - start[0], 2) + Math.pow(end[1] - start[1], 2));

      // Calculate the midpoint between the start and end location points
      const midpoint = [(start[0] + end[0]) / 2, (start[1] + end[1]) / 2];

      // Next, offset the midpoint to create a control point for the curve arc
      // We need to adjust the offset proportionally to the distance to avoid steep curves for short distances
      const controlPoint = [midpoint[0], midpoint[1] + 0.7 * distance]; // Set multiplier to 0.7

      const steps = 100;
      const arcCoordinates = [];

      for (let i = 0; i <= steps; i++) {
        const t = i / steps;
        const x = (1 - t) * (1 - t) * start[0] + 2 * (1 - t) * t * controlPoint[0] + t * t * end[0];
        const y = (1 - t) * (1 - t) * start[1] + 2 * (1 - t) * t * controlPoint[1] + t * t * end[1];
        arcCoordinates.push([x, y]);
      }

      const arcGeojson = {
        type: 'FeatureCollection',
        features: [{
          type: 'Feature',
          geometry: {
            type: 'LineString',
            coordinates: arcCoordinates
          }
        }]
      };

      if (map.getSource('line-arc')) {
        map.getSource('line-arc').setData(arcGeojson);
      } else {
        map.addSource('line-arc', {
          type: 'geojson',
          data: arcGeojson
        });
        map.addLayer({
          id: 'line-arc',
          type: 'line',
          source: 'line-arc',
          layout: {
            'line-join': 'round',
            'line-cap': 'round'
          },
          paint: {
            'line-color': '#31B6C0',
            'line-width': 4,
            'line-dasharray': [2, 2]
          }
        });
      }

      // Calculate the midpoint of the arc
      const midpointArc = arcCoordinates[Math.floor(arcCoordinates.length / 2)];

      // Create custom marker element for flying drone
      const flyingDrone = document.createElement('div');
      flyingDrone.className = 'flying-drone';

      // Add the marker at the midpoint of the arc
      new mapboxgl.Marker(flyingDrone)
        .setLngLat(midpointArc)
        .addTo(map);
    }

    /**
     * Draw a straight line that simulates a shadow between the start and end location points
     * @param {Array} start - The start location coordinates
     * @param {Array} end - The end location coordinates
     */
    function drawShadow(start, end) {
      const lineGeojson = {
        type: 'FeatureCollection',
        features: [{
          type: 'Feature',
          geometry: {
            type: 'LineString',
            coordinates: [start, end]
          }
        }]
      };

      // Add the shadow
      if (map.getSource('line-shadow')) {
        map.getSource('line-shadow').setData(lineGeojson);
      } else {
        map.addSource('line-shadow', {
          type: 'geojson',
          data: lineGeojson
        });
        map.addLayer({
          id: 'line-shadow',
          type: 'line',
          source: 'line-shadow',
          layout: {
            'line-join': 'round',
            'line-cap': 'round'
          },
          paint: {
            'line-color': '#929090',  // Shadow colour
            'line-width': 6,  // Shadow width
            'line-opacity': 0.5  // Shadow opacity
          }
        });
      }
    }
  </script>
  <%- include('templates/footer') %>